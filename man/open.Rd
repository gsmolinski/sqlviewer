% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/open.R
\name{open}
\alias{open}
\title{Run 'sqlviewer' App}
\usage{
open(drv, ..., app_host = "127.0.0.1", app_port = 49152)
}
\arguments{
\item{drv}{database driver name \emph{with} package name (character vector length 1), e.g. \verb{"RPostgres::Postgres}. See Details section.}

\item{...}{other database driver arguments passed to \verb{[DBI::dbConnect()]}. See that function for details.}

\item{app_host}{IPv4 address on which application should listen on. Defaults to \code{"127.0.0.1"}, i.e., localhost. Argument passed to \verb{[shiny::shinyApp()]}.}

\item{app_port}{TCP port on which application should listen on. Default to \code{49152}. Argument passed to \verb{[shiny::shinyApp()]}.}
}
\value{
Used for side effect: to run app as a background job.
}
\description{
Runs \code{shiny} application as a background job with the functionality provided by \code{sqlviewer}:
preview SQL queries and construct complex queries using solution inspired by pipe operator.
}
\details{
To establish connection with database, using \code{DBI::dbConnect()}, it is necessary to provide
database driver (as well as other arguments which are needed by specific driver). However,
implementation of \code{sqlviewer} expects that driver will be provided as a character vector length 1, not
a function call itself. Moreover, it is also necessary to provide package name along with the driver.
As an example, if one would like to connect with the PostgreSQL database and use package \code{RPostgres} for this,
then it would be necessary to pass an argument \code{"RPostgres::Postgres"} (notice quotation mark and lack of parenthesis).
Even that user should be provide character vector, it is expected that database package from which driver is used,
will be installed. In other words, if using \code{RPostgres} package, this package must be installed.
}
\section{Running SQL Queries}{

}

\section{Piping}{

}

\examples{
\dontrun{
# install.packages("RSQLite")
sqlviewer::open("RSQLite::SQLite", ":memory:") # use temporary, in-memory SQLite database
}
}
