% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/open.R
\name{open}
\alias{open}
\title{Run \code{sqlviewer} App}
\usage{
open(
  drv,
  ...,
  app_host = "127.0.0.1",
  app_port = 49152,
  save_temp_path_to = ""
)
}
\arguments{
\item{drv}{database driver name \emph{with} package name (character vector length 1), e.g. \code{"RPostgres::Postgres"}. See \emph{Details} section.}

\item{...}{other database driver arguments passed to \verb{[DBI::dbConnect()]}. See that function for details.}

\item{app_host}{IPv4 address (character vector length 1) on which application should listen on. Defaults to \code{"127.0.0.1"} (localhost). Argument passed to \verb{[shiny::shinyApp()]}.}

\item{app_port}{TCP port (integer vector length 1) on which application should listen on. Defaults to \code{49152}. Argument passed to \verb{[shiny::shinyApp()]}.}

\item{save_temp_path_to}{where to save \emph{path} to temporary file? Defaults to \code{""}, meaning no saving. Argument passed to \code{\link[base:cat]{base::cat()}} to \code{file} parameter. See \emph{Security} section for details.}
}
\value{
Used for side effect: to run app as a background job.
}
\description{
Runs \code{shiny} application as a background job with the functionality provided by \code{sqlviewer}:
preview SQL queries and construct complex queries using solution inspired by pipe operator.
}
\details{
To establish connection with database using \verb{[DBI::dbConnect()]}, it is necessary to provide
database driver (as well as other arguments which are needed by specific driver). However,
implementation of \code{sqlviewer} expects that driver will be provided as a character vector length 1, not
a function call itself. Moreover, it is also necessary to provide package name along with the driver.
As an example, if one would like to connect with the PostgreSQL database and use package \code{RPostgres} for that,
then it would be necessary to pass an argument: \code{"RPostgres::Postgres"} (notice quotation mark indicating character vector and lack of parenthesis).
Even that user should provide character vector, it is expected that database package from which driver is used,
will be installed. In other words, if using \code{RPostgres} package (or any other database specific package), this package must be installed on machine.

Currently, it is not possible to construct function which will close running background job. To close the app, one
must go to 'Background Jobs' pane and press 'STOP' button or close the main R session, so all child R sessions
(including background jobs) will be closed as well.
}
\section{Running SQL Queries}{

To run SQL query, simply copy statements with labels (see \emph{Labeling} section) to clipboard (ensure switch input to observe clipboard is on) and \code{sqlviewer} will run
the code and display result as a table. You can copy more than one query at a time, then more than one table will be displayed.
\code{sqlviewer} will write back to the clipboard reconstructed query or queries without label and if pipe operator was used (see \emph{Piping} section), then
query or queries composed by piped queries will be returned.
}

\section{Labeling}{

}

\section{Piping}{

}

\section{Security}{

User should be aware that password to database passed as an argument is stored
in temporary file (R script) as a plain text, i.e. even if password was passed as a variable, in
temporary file value of this variable will be used. This is needed to run script as
background job and immediately after running background job, temporary file is removed.
However, it may happen due some errors during function execution (e.g. not reaching the code line which removes
file, because machine was shut down during code execution) that file won't be removed. To know where
the R script was saved (to be able to remove it manually later), one can pass character vector length 1 argument to
\code{save_temp_path_to} - temporary path will be saved there.
}

\examples{
\dontrun{
temp_db <- tempfile("sqlviewerDB_example", fileext = ".db")
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir = temp_db)
DBI::dbWriteTable(conn, "iris", iris)
sqlviewer::open("duckdb::duckdb", dbdir = temp_db)
# Now, copy SQL statement to clipboard: (i.e. include label: "-- #test")
#
# -- #test
# SELECT * FROM iris;
#
# and see result in Viewer.
# To finish, press 'STOP' button in Background Jobs pane.
DBI::dbDisconnect(conn)
file.remove(temp_db)
}
}
