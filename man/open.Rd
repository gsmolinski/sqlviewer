% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/open.R
\name{open}
\alias{open}
\title{Run \code{sqlviewer} App}
\usage{
open(
  drv,
  ...,
  app_host = "127.0.0.1",
  app_port = 49152,
  save_temp_path_to = ""
)
}
\arguments{
\item{drv}{database driver name \emph{with} package name (character vector length 1), e.g. \code{"RPostgres::Postgres"}. See \emph{Details} section.}

\item{...}{other database driver arguments passed to \verb{[DBI::dbConnect()]}. See that function for details.}

\item{app_host}{IPv4 address (character vector length 1) on which application should listen on. Defaults to \code{"127.0.0.1"} (localhost). Argument passed to \verb{[shiny::shinyApp()]}.}

\item{app_port}{TCP port (integer vector length 1) on which application should listen on. Defaults to \code{49152}. Argument passed to \verb{[shiny::shinyApp()]}.}

\item{save_temp_path_to}{where to save \emph{path} to temporary file? Defaults to \code{""}, meaning no saving. Argument passed to \code{\link[base:cat]{base::cat()}} to \code{file} parameter. See \emph{Security} section for details.}
}
\value{
Used for side effect: to run app as a background job.
}
\description{
Runs \code{shiny} application as a background job with the functionality provided by \code{sqlviewer}:
preview SQL queries and construct complex queries using solution inspired by pipe operator.
}
\details{
To establish connection with database using \verb{[DBI::dbConnect()]}, it is necessary to provide
database driver (as well as other arguments which are needed by specific driver). However,
implementation of \code{sqlviewer} expects that driver will be provided as a character vector length 1, not
a function call itself. Moreover, it is also necessary to provide package name along with the driver.
As an example, if one would like to connect with the PostgreSQL database and use package \code{RPostgres} for that,
then it would be necessary to pass an argument: \code{"RPostgres::Postgres"} (notice quotation mark indicating character vector and lack of parenthesis).
Even that user should provide character vector, it is expected that database package from which driver is used,
will be installed. In other words, if using \code{RPostgres} package (or any other database specific package), this package must be installed on machine.

Currently, it is not possible to construct function which will close running background job. To close the app, one
must go to 'Background Jobs' pane and press 'STOP' button or close the main R session, so all child R sessions
(including background jobs) will be closed as well.
}
\section{Running SQL Queries}{

To run SQL query, simply copy statements with labels (see \emph{Labeling} section) to clipboard (ensure switch input to observe clipboard is on) and \code{sqlviewer} will run
the code and display result as a table. You can copy more than one query at a time, then more than one table will be displayed.
}

\section{Labeling}{

Each SQL query needs to have label (name). Label \strong{has to be in its own line} (i.e. nothing more should exist in the same line except of intendation)
and have following format:
\preformatted{
-- #label
}
where instead of \code{label} should be unique query name (see \emph{Example} section below or \emph{Piping} section). \strong{To be valid, label must be
constructed using only: letters, numbers and underscores.}
Label can be used later for piping and will be used when displaying results of queries in the app.
}

\section{Piping}{

SQL queries can be very complex, especially when using nested queries. \code{sqlviewer} comes with the functionality to pipe one
labelled query into another query using \verb{|>} operator. Below is an example of how to pipe one query into another query:
\preformatted{
-- #all_species
SELECT i.Species
FROM iris i;

-- #filtered_data
SELECT *
FROM iris i
WHERE i.Species IN (
   -- |> all_species
   );
}
Pipe operator \strong{has to be in its own line} (i.e. nothing more should exist in the same line except indentation) and can be read as
"here put \emph{this} query". \code{sqlviewer} will analyze the code and insert labelled queries \emph{as-is} (query is not computed, just inserted)
in the line where pipe operator was used. It is not necessary to write queries from top to bottom, i.e. nested labelled query
can be below query into which this nested query will be piped.
}

\section{App Functionality}{

Switch button is used to indicate if clipboard should be observed. If set to off, then all
existing queries will be removed and no new queries will be created. To see result for chosen query,
click on its name. To copy query - click copy button - and to remove query, click remove button. When
query is removed, it is also copied to clipboard.

\code{sqlviewer} displays only first 1000 rows of table. If some names of queries are duplicated, then app won't run.
}

\section{Security}{

User should be aware that password to database passed as an argument is stored
in temporary file (R script) as a plain text, i.e. even if password was passed as a variable, in
temporary file value of this variable will be used. This is needed to run script as
background job and immediately after running background job, temporary file is removed.
However, it may happen due to some errors during function execution (e.g. not reaching the code line which removes
file, because machine was shut down during code execution) that file won't be removed. To know where
the R script was saved (to be able to remove it manually later), one can pass character vector length 1 argument to
\code{save_temp_path_to} parameter - temporary path will be saved there.
}

\examples{
\dontrun{
temp_db <- tempfile("sqlviewerDB_example", fileext = ".db")
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir = temp_db)
DBI::dbWriteTable(conn, "iris", iris)
DBI::dbDisconnect(conn)
sqlviewer::open("duckdb::duckdb", dbdir = temp_db)
# Now, copy SQL statement to clipboard (without comment signs!) and include label (-- #all_data)
#
# -- #all_data
# SELECT * FROM iris;
#
# and see result in Viewer.
# To finish, press 'STOP' button in Background Jobs pane.
file.remove(temp_db)
}
}
